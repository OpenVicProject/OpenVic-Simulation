#!/usr/bin/env python

Import("env")

def build_openvic_dataloader(env):
    ovdl_env = SConscript("openvic-dataloader/SConstruct")
    env.Append(LIBPATH=ovdl_env.openvic_dataloader["LIBPATH"])
    env.Prepend(LIBS=ovdl_env.openvic_dataloader["LIBS"])
    env.Append(CPPPATH=ovdl_env.openvic_dataloader["INCPATH"])
    env.openvic_dataloader = ovdl_env.openvic_dataloader
    env.exposed_includes += env.openvic_dataloader["INCPATH"]

def build_lexy_vdf(env):
    lvdf_env = SConscript("lexy-vdf/SConstruct")
    env.Append(LIBPATH=lvdf_env.lexy_vdf["LIBPATH"])
    env.Prepend(LIBS=lvdf_env.lexy_vdf["LIBS"])
    env.Append(CPPPATH=lvdf_env.lexy_vdf["INCPATH"])
    env.lexy_vdf = lvdf_env.lexy_vdf

def build_ordered_map(env):
    include_path = "ordered-map/include"
    env.ordered_map = {}
    env.ordered_map["INCPATH"] = [env.Dir(include_path)]
    env.Append(CPPPATH=env.ordered_map["INCPATH"])
    env.exposed_includes += env.ordered_map["INCPATH"]

def build_colony(env):
    include_path = "plf_colony"
    env.colony = {}
    env.colony["INCPATH"] = [env.Dir(include_path)]
    env.Append(CPPPATH=env.colony["INCPATH"])
    env.exposed_includes += env.colony["INCPATH"]

def build_function2(env):
    include_path = "function2/include"
    env.function2 = {}
    env.function2["INCPATH"] = [env.Dir(include_path)]
    env.Append(CPPPATH=env.function2["INCPATH"])
    env.exposed_includes += env.function2["INCPATH"]

def build_std_function(env):
    include_path = "std_function"
    env.std_function = {}
    env.std_function["INCPATH"] = [env.Dir(include_path)]
    env.Append(CPPPATH=env.std_function["INCPATH"])
    env.exposed_includes += env.std_function["INCPATH"]

def build_memory(env):
    import os
    from pathlib import Path
    import methods

    include_path = "memory/include"
    inner_include_path = include_path + "/foonathan/memory"
    source_path = "memory/src"

    env.Append(CPPDEFINES=[
        f'FOONATHAN_MEMORY=1',
        f"FOONATHAN_MEMORY_VERSION_MAJOR=0",
        f"FOONATHAN_MEMORY_VERSION_MINOR=7",
        f"FOONATHAN_MEMORY_VERSION_PATCH=4"
    ])

    memory_env = env.Clone()
    memory_env.Append(
        BUILDERS={
            "GenerateMemoryConfig": memory_env.Builder(action=methods.generate_memory_config_header),
            "GenerateMemoryContainerNodeSizes": memory_env.Builder(action=methods.generate_memory_container_size_header)
        }
    )

    memory_env.config_data = {
        "FOONATHAN_MEMORY_CHECK_ALLOCATION_SIZE": 1,
        "FOONATHAN_MEMORY_IMPL_DEFAULT_ALLOCATOR": "heap_allocator",
        "FOONATHAN_MEMORY_DEBUG_ASSERT": 0,
        "FOONATHAN_MEMORY_DEBUG_FILL": 0,
        "FOONATHAN_MEMORY_DEBUG_FENCE": 0,
        "FOONATHAN_MEMORY_DEBUG_LEAK_CHECK": 0,
        "FOONATHAN_MEMORY_DEBUG_POINTER_CHECK": 0,
        "FOONATHAN_MEMORY_DEBUG_DOUBLE_DEALLOC_CHECK": 0,
        "FOONATHAN_MEMORY_EXTERN_TEMPLATE": 1,
        "FOONATHAN_MEMORY_TEMPORARY_STACK_MODE": 2,
    }
    
    config = memory_env.GenerateMemoryConfig(memory_env.File(Path(inner_include_path) / "config_impl.hpp"), "SCsub")
    node_size_impl = memory_env.GenerateMemoryContainerNodeSizes(memory_env.File(Path(inner_include_path) / "detail" / "container_node_sizes_impl.hpp"), "SCsub")

    if memory_env.get("is_msvc", False):
        if memory_env.get("use_clang_cl"):
            memory_env.Append(CXXFLAGS=["-pedantic-errors", "-Werror", "-Wall", "-Wextra", "-Wconversion", "-Wsign-conversion"])
        else:
            memory_env.Append(CXXFLAGS=["/WX", "/W3", "/D", "_CRT_SECURE_NO_WARNINGS"])
    else:
        memory_env.Append(
            CXXFLAGS=["-pedantic-errors", "-Werror", "-Wall", "-Wextra", "-Wconversion", "-Wsign-conversion"]
        )
    memory_env.Append(CPPPATH=[[memory_env.Dir(p) for p in [source_path, Path(inner_include_path)]]])
    sources = env.GlobRecursive("*.cpp", [source_path])
    env.memory_sources = sources

    library_name = "libmemory" + env["LIBSUFFIX"]
    library = memory_env.StaticLibrary(target=os.path.join(source_path, library_name), source=sources)
    Default([config, node_size_impl, library])

    env.memory = {}
    env.memory["INCPATH"] = [memory_env.Dir(include_path)]

    env.Append(CPPPATH=env.memory["INCPATH"])
    env.Append(LIBPATH=[memory_env.Dir(source_path)])
    env.Prepend(LIBS=[library_name])

    env.exposed_includes += env.memory["INCPATH"]

def build_spdlog(env):
    import os

    spdlog_level = "SPDLOG_LEVEL_INFO"
    if "SPDLOG_LEVEL" in os.environ:
        spdlog_level = os.environ["SPDLOG_LEVEL"].upper()
        if not spdlog_level.startswith("SPDLOG_LEVEL_"):
            spdlog_level = "SPDLOG_LEVEL_" + spdlog_level
        if not spdlog_level in [
            "SPDLOG_LEVEL_TRACE",
            "SPDLOG_LEVEL_DEBUG",
            "SPDLOG_LEVEL_INFO",
            "SPDLOG_LEVEL_WARN",
            "SPDLOG_LEVEL_ERROR",
            "SPDLOG_LEVEL_CRITICAL",
            "SPDLOG_LEVEL_OFF"
        ]:
            print("SPDLOG_LEVEL can only be trace, debug, info, warn, error, critical, or off")
            exit(255)
    elif env["dev_build"]:
        spdlog_level = "SPDLOG_LEVEL_DEBUG"
    elif env["target"] == "template_release" or env["optimize"] in ["speed", "size"]:
        spdlog_level = "SPDLOG_LEVEL_WARN"

    env.Append(CPPDEFINES=[("SPDLOG_ACTIVE_LEVEL", spdlog_level), "SPDLOG_FMT_EXTERNAL", "SPDLOG_COMPILED_LIB", "SPDLOG_NO_EXCEPTIONS"])
    if env["platform"] != "macos":
        env.Append(CPPDEFINES=["SPDLOG_FWRITE_UNLOCKED"])
    spdlog_env = env.Clone()

    include_path = "spdlog/include"
    source_path = "spdlog/src"
    source_dir = spdlog_env.Dir(source_path)

    env.spdlog = {}
    env.spdlog["INCPATH"] = [spdlog_env.Dir(include_path)]

    spdlog_env.Append(CPPPATH=[source_dir, env.spdlog["INCPATH"]])
    sources = env.GlobRecursive("*.cpp", [source_path])
    env.spdlog_sources = sources

    library_name = "libspdlog" + env["LIBSUFFIX"]
    library = spdlog_env.StaticLibrary(target=os.path.join(source_path, library_name), source=sources)
    Default(library)

    env.Append(CPPPATH=[env.spdlog["INCPATH"]])
    if env.get("is_msvc", False):
        env.Append(CXXFLAGS=["/external:I", env.spdlog["INCPATH"][0], "/external:W0"])
    else:
        env.Append(CXXFLAGS=["-isystem", env.spdlog["INCPATH"][0]])
    env.Append(LIBPATH=[source_dir])
    env.Prepend(LIBS=[library_name])

    env.exposed_includes += env.spdlog["INCPATH"]

def link_tbb(env):
    import sys
    if not env.get("is_msvc", False) and not env.get("use_mingw", False) and sys.platform != "darwin":
        env.ParseConfig("pkg-config tbb --cflags --libs")

build_openvic_dataloader(env)
build_lexy_vdf(env)
build_ordered_map(env)
build_colony(env)
build_function2(env)
build_std_function(env)
build_memory(env)
build_spdlog(env)
link_tbb(env)