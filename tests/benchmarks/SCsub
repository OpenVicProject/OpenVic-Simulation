#!/usr/bin/env python
import os
import subprocess
import platform
import sys

import SCons
from SCons.Script.SConscript import SConsEnvironment


def BenchmarkPostAction(target=None, source=None, env=None):
    print()
    return subprocess.run([target[0].path]).returncode


def BuildBenchmarks(env, **kwargs):
    benchmark = env.Program(**kwargs)
    env.NoCache(benchmark)
    return benchmark


def RunBenchmarks(env):
    benchmark_action = env.Action(BenchmarkPostAction, None)
    benchmark_post_action = env.AddPostAction(env.benchmark, benchmark_action)
    env.AlwaysBuild(benchmark_post_action)


SConsEnvironment.BuildBenchmarks = BuildBenchmarks
SConsEnvironment.RunBenchmarks = RunBenchmarks

Import("env")

BINDIR = "bin"

env.openvic_simulation_benchmarks = {}

# For the reference:
# - CCFLAGS are compilation flags shared between C and C++
# - CFLAGS are for C-specific compilation flags
# - CXXFLAGS are for C++-specific compilation flags
# - CPPFLAGS are for pre-processor flags
# - CPPDEFINES are for pre-processor defines
# - LINKFLAGS are for linking flags

# tweak this if you want to use different folders, or more folders, to store your source code in.
source_path = "src"

benchmarks_name = "openvic-simulation"
benchmarks_env = env.Clone()
benchmarks_env.Append(CPPDEFINES=["OPENVIC_SIMULATION_BENCHMARKS"])
benchmarks_env.Append(CPPPATH=[benchmarks_env.Dir(source_path)])
benchmarks_env.benchmarks_sources = env.GlobRecursive("*.cpp", [source_path])

SConscript("deps/SCsub", {"env": benchmarks_env, "parent_env": env })

benchmarks_env.benchmark = benchmarks_env.BuildBenchmarks(
    source=benchmarks_env.benchmarks_sources,
    target=os.path.join(BINDIR, benchmarks_name),
    PROGSUFFIX=".benchmarks" + env["PROGSUFFIX"],
)
Default(benchmarks_env.benchmark)

Return("benchmarks_env")
