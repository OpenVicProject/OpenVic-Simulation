#!/usr/bin/env python
import os
import subprocess

from SCons.Script.SConscript import SConsEnvironment


def UnitTestPostAction(target=None, source=None, env=None):
    print()
    return subprocess.run([target[0].path]).returncode


def BuildUnitTest(env, **kwargs):
    test = env.Program(**kwargs)
    env.NoCache(test)
    return test


def RunUnitTest(env):
    unit_test_action = env.Action(UnitTestPostAction, None)
    test_post_action = env.AddPostAction(env.unit_test, unit_test_action)
    env.AlwaysBuild(test_post_action)


SConsEnvironment.BuildUnitTest = BuildUnitTest
SConsEnvironment.RunUnitTest = RunUnitTest

Import("env")

BINDIR = "bin"

env.openvic_simulation_tests = {}

# For the reference:
# - CCFLAGS are compilation flags shared between C and C++
# - CFLAGS are for C-specific compilation flags
# - CXXFLAGS are for C++-specific compilation flags
# - CPPFLAGS are for pre-processor flags
# - CPPDEFINES are for pre-processor defines
# - LINKFLAGS are for linking flags

# tweak this if you want to use different folders, or more folders, to store your source code in.
source_path = "src"

tests_name = "openvic-simulation"
tests_env = env.Clone()
tests_env.Append(CPPDEFINES=["OPENVIC_SIMULATION_TESTS"])
tests_env.Append(CPPPATH=[tests_env.Dir(source_path)])
tests_env.tests_sources = env.GlobRecursive("*.cpp", [source_path])

SConscript("deps/SCsub", {"env": tests_env})

tests_env.unit_test = tests_env.BuildUnitTest(
    source=tests_env.tests_sources, target=os.path.join(BINDIR, tests_name), PROGSUFFIX=".tests" + env["PROGSUFFIX"]
)
Default(tests_env.unit_test)

Return("tests_env")
